// --------------------------------------------------
// @sylefeb 2021
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
// --------------------------------------------------
//
// SPI flash controller -- emergency QSPI exit
//
// Stuck in QSPI? Cannot program the flash anymore?
//
// No worries! program this little design through SRAM
// and get out of QSPI limbo!
//
// ========================================================
// IMPORTANT: on the ice40, use icepack -s
// ========================================================

$$spi4x  = nil
$$spi2x  = 1

$$if ICARUS then
$$SIM_FOMU  = nil
$$SIM_ULX3S = 1
$$end

$$nBytes = 4

$$if not spi4x and not spi2x and nBytes ~= 1 then
$$ error('single speed SPIflash controller supports only byte access')
$$end

$$if ICARUS then
$$if SIM_FOMU or FOMU then
// download MX25R1635F from macronix Verilog models
append('MX25R1635F/MX25R1635F.v')
import('simul_spiflash_m.v')
$$else
// download W25Q128JVxIM from winbond Verilog models
append('W25Q128JVxIM/W25Q128JVxIM.v')
import('simul_spiflash_w.v')
$$end
$$end

$$master_freq = 12

$$if ICE40 then
  $$if spi4x then
    import('../common/ice40_half_quarter_clock.v')
    $$master_freq = 100
  $$elseif spi2x then
    import('../common/ice40_half_clock.v')
  $$else
    $$error('define either spi2x or spi4x')
  $$end
  // Import hardware modules
  $$if not FOMU then
    $$master_freq = 50
    import('../common/plls/icebrkr_$master_freq$_lock.v')
  $$else
    $$master_freq = 25
    import('../common/plls/fomu_$master_freq$.v')
  $$end
$$end

import('../common/passthrough.v')

$$if ECP5 then
  $$master_freq = 50
  import('../common/plls/ulx3s_50_25.v')
$$end

$$if spi4x then
  $include('spiflash4x.si')
  $$uart_in_clock_freq_mhz = master_freq//4
$$elseif spi2x then
  $include('spiflash2x.si')
  $$uart_in_clock_freq_mhz = master_freq//2
$$end
$include('../common/uart.si')

// --------------------------------------------------
// PLL for simulation
// --------------------------------------------------

$$if SIMULATION then
algorithm pll(
  output! uint1 clock4x,
  output! uint1 clock2x,
  output! uint1 clock1x,
) <autorun> {
  uint2 counter(0);
  clock4x := clock;
  clock2x := counter[0,1]; // x2 slower
  clock1x := counter[1,1]; // x4 slower
  always { counter = counter + 1; }
}
$$end

// --------------------------------------------------
// main design unit
// --------------------------------------------------

algorithm main(
  output uint8 leds,
$$if QSPIFLASH then
  output uint1 sf_clk,
  output uint1 sf_csn,
  inout  uint1 sf_io0,
  inout  uint1 sf_io1,
  inout  uint1 sf_io2,
  inout  uint1 sf_io3,
$$end
$$if UART then
  output uint1 uart_tx,
  input  uint1 uart_rx,
$$end
) <@clock1x,!rst> {
$$if ICE40 then
  $$if spi4x then
    uint1 clock2x = uninitialized;
    uint1 clock4x = uninitialized;
    uint1 rst     = uninitialized;
    pll _(
      clock_in  <: clock,
      clock_out :> clock4x,
      reset     :> rst
    );
    uint1 clock1x  = uninitialized;
    ice40_half_quarter_clock hc(
      clock_in  <: clock4x,
      clock_h   :> clock2x,
      clock_q   :> clock1x,
    );
  $$elseif spi2x then
    uint1 clock2x = uninitialized;
    uint1 rst     = uninitialized;
    pll _(
      clock_in  <: clock,
      clock_out :> clock2x,
      reset     :> rst
    );
    uint1 clock1x  = uninitialized;
    ice40_half_clock hc(
      clock_in  <: clock2x,
      clock_out :> clock1x,
    );
  $$else
    $$error('Either spi2x or spi4x has to be set')
  $$end
$$elseif ECP5 then
  uint1 clock1x = uninitialized;
  uint1 clock2x = uninitialized;
  uint1 locked  = uninitialized;
  uint1 rst     = uninitialized;
  pll_50_25 _(
    clkin   <: clock,
    clkout0 :> clock2x,
    clkout1 :> clock1x,
    locked  :> locked
  );
  uint1 nlocked <: ~ locked;
  passthrough _(inv <: nlocked,outv :> rst);
$$elseif SIMULATION then
  uint1 clock1x = uninitialized;
  uint1 clock2x = uninitialized;
  uint1 clock4x = uninitialized;
  pll clkgen<@clock,!reset>(
    clock1x :> clock1x,
    clock2x :> clock2x,
    clock4x :> clock4x
  );
  uint1 rst     = uninitialized;
  passthrough _(inv <: reset,outv :> rst);
$$end

$$if SIMULATION then
  uint1 sf_csn(1);
  uint1 sf_clk(0);
  uint1 sf_io0(0);
  uint1 sf_io1(0);
  uint1 sf_io2(0);
  uint1 sf_io3(0);
$$if ICARUS then
  simul_spiflash simu(
    CSn <:  sf_csn,
    CLK <:  sf_clk,
    IO0 <:> sf_io0,
    IO1 <:> sf_io1,
    IO2 <:> sf_io2,
    IO3 <:> sf_io3,
  );
$$end
  uint32 cycle(0);
$$end

  spiflash_exit_qpi _<reginputs,@clock2x> (
    sf_clk  :>  sf_clk,
    sf_csn  :>  sf_csn,
    sf_io0  <:> sf_io0,
    sf_io1  <:> sf_io1,
    sf_io2  <:> sf_io2,
    sf_io3  <:> sf_io3,
  );

  always {
$$if SIMULATION then
    cycle = cycle + 1;
    if (cycle > 2000) {
      __finish();
    }
$$end
  }

}
