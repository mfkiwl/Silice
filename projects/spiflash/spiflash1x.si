// @sylefeb 2021
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
//
// ========================================================
// IMPORTANT: on the ice40, use icepack -s
// ========================================================
//
// 1x version (dual SPI)
//
// Note: on Winbond flash chip see W25Q128FV datasheet for continuous read mode
//       (BBh with mode bits)
//

import('ddr_clock.v')

$$if VERILATOR then
import('../common/verilator_data.v') // this is a feature supported by Silice
                                     // verilator framework to access raw data
                                     // stored in a 'data.raw' file
$$end

$$if ICE40 then
import('../common/ice40_sb_io_inout.v')
import('../common/ice40_sb_io.v')
$$end

$$if ECP5 then
import('ecp5_inout.v')
import('ecp5_out.v')
// import('passthrough.v')
$$end

$$if not nBytes then
$$ nBytes = 1
$$end

unit spiflash_dspi(
  input   uint8 send,
  input   uint1 trigger,
  input   uint1 send_else_read,
  output  uint8 read,
  output  uint1 clk(0),
  output  uint1 csn(1),
  inout   uint1 io0,
  inout   uint1 io1,
) {
  // internal state
  uint1 dc(0);  uint8 sending(0); uint2 osc(0);
  uint1 enable(0);
  uint2 read_reg(0);

$$if SIMULATION then
  ddr_clock _(clock <: clock, enable <:: enable, ddr_clock :> clk);
  uint1 d_csn(1);
  always {
    // output enable on ios
    io0.oenable = send_else_read; io1.oenable = send_else_read;
    // read current
    read      = {read[0,6],read_reg};
    read_reg  = {io1.i,io0.i};
    // update outputs
    io0.o     = sending[{osc,1b0},1];  io1.o = sending[{osc,1b1},1];
    // start/keep sending?
    sending   = send;
    osc       = (enable) ? (osc-1) : 2b11;
    enable    = trigger;
    csn       = d_csn;
    d_csn     = ~enable;
  }
$$else
  uint1 chip_select(0);
  uint2 io_oe(0); uint2 io_i(0); uint2 io_o(0);
$$if ICE40 then
  ddr_clock _(clock <: clock, enable <:: enable, ddr_clock :> clk);
  // setup registered tristate ios
  sb_io_inout _(clock <: clock, oe  <: io_oe[0,1], in :> io_i[0,1], out <: io_o[0,1], pin <:> io0);
  sb_io_inout _(clock <: clock, oe  <: io_oe[1,1], in :> io_i[1,1], out <: io_o[1,1], pin <:> io1);
  uint1 nenable <:: ~ enable;
  sb_io sb_csn(clock <: clock, out <: nenable, pin :> csn);
$$end
$$if ECP5 then
  // ---- Lattice ecp5 implementation using vendor specific primitives
  // uint4 io_oe_1(0); uint4 io_o_1(0);  uint4 io_oe_2(0); uint4 io_o_2(0);
  uint1       en_1(0);    uint1 en_2(0);
  uint1       clk_flash <:: (~clock) & en_2;
  passthrough _(inv <: clk_flash, outv :> clk);
  ecp5_inout  _(clock <: clock, oe  <:: io_oe[0,1],  in :> io_i[0,1], out <:: io_o[0,1], pin <:> io0);
  ecp5_inout  _(clock <: clock, oe  <:: io_oe[1,1],  in :> io_i[1,1], out <:: io_o[1,1], pin <:> io1);
  ecp5_out    _(clock <: clock, out <:  chip_select, pin :> csn);
$$end
  always {
    $$if ECP5 then
    chip_select = ~ ( trigger | en_1 );
    en_2        = en_1;
    en_1        = enable;
    read_reg    = io_i;
    $$else
    chip_select = ~ ( trigger | enable );
    $$end
    // output enable on ios
    io_oe     = {2{send_else_read}};
    // read current
    read      = {read[0,6],read_reg};
    read_reg  = io_i;
    // update outputs
    io_o      = sending[{osc,1b0},2];
    // start/keep sending?
    sending   = send;
    osc       = (enable) ? (osc-1) : 2b11;
    enable    = trigger;
  }
$$end
}

// -------------------------------------------------------------

unit spiflash_rom_core(
  input   uint1  in_ready,
  input   uint24 addr,
  output  uint8  rdata,
  output  uint1  busy(1),
  output  uint1  rdata_available(0),
  // DSPI flash
  output  uint1  sf_csn(1),
  output  uint1  sf_clk,
  inout   uint1  sf_io0,
  inout   uint1  sf_io1,
) {

  uint32 sendvec(0);

  spiflash_dspi spiflash(
    clk     :> sf_clk,
    csn     :> sf_csn,
    io0    <:> sf_io0,
    io1    <:> sf_io1,
  );

  uint11 wait(0);
  uint4  four(0);
  uint3  stage(0);
  uint3  after(1);
  uint2  init(2b11);
  uint1  accept_in(0);
  uint1  continue(0);
$$if FOMU or SIM_FOMU then
  uint8  mode_reg(8b10100101);
$$else
  uint8  mode_reg(8b00100000); // continuous read, M5-4=(1,0)
$$end

$$if SIMULATION then
  uint32 cycle(0);
$$if VERILATOR then
  verilator_data vdta(clock <: clock);
$$end
$$end
  always {

    accept_in       = 0;
    rdata_available = 0;
    // continue while in_ready stays high
    continue = continue & in_ready;

    switch (stage)
    {
      case 0: {
$$if ICARUS then
        // this is necessary for icarus as init is otherwise 1bz
        spiflash.trigger = reset ? 0 : spiflash.trigger;
$$end
        stage = wait[10,1] ? after : 0; // counts up to 1024 and goes to after
        wait  = wait + 1;
      }
      case 1: { accept_in = 1; }
      case 2: {
$$if ICARUS then
        //__display("[%d] spiflash [2] init:%b send:%b",cycle,init,sendvec[24,8]);
$$end
        spiflash.trigger        = 1;
        spiflash.send           = sendvec[24,8];
        sendvec                 = sendvec << 8;
        stage                   = 0; // wait
        wait                    = 1022; //_ 4 cycles
        after                   = four[0,1] ? 3 : 2;
        four                    = four >> 1;
      }
      case 3: {
        spiflash.trigger        = ~init[1,1];
        stage                   = 0; // wait
        spiflash.send           = mode_reg; // requests continuous read
        // send dummy
$$if ULX3S then
        $$error('TODO: adjust delays')
        wait                    = 1023; //_ 3 cycles
$$else
        wait                    = init[0,1] ? 1019 : 1021;
        //                                    ^^^^
        //                         init needs a longer delay
$$end

        after                   = 4;
      }
      case 4: {
        spiflash.send_else_read = 0;
        stage                   = 0; // wait
$$if ULX3S then
        $$error('TODO: adjust delays')
        wait                    = 1021;
$$else
        wait                    = 1020; //_ 6 cycles (one extra due to registered ios)
$$end
        after                   = 5;
      }
      case 5: {
  $$if VERILATOR then
        rdata                   = vdta.data;  // from 'data.raw'
        vdta.addr               = vdta.addr + 1;
  $$else
        rdata                   = spiflash.read;
  $$end
        rdata_available         = ~init[0,1];
        spiflash.trigger        = continue;
        busy                    = continue;
        init                    = {1b0,init[1,1]};
        wait                    = 1022; //_ 4 cycles
        // return to start stage if no further reads, otherwise wait and ...
        stage                   = ~continue ? 1 : 0;
        after                   = 5; // ... keep reading
        // accept an input immediately if no further reads
        accept_in               = ~continue;
$$if SIMULATION then
        //__display("[%d](%d) spiflash [5] (%x) in_ready:%b accept_in:%b",cycle,cycle>>1,rdata,in_ready,accept_in);
$$end
      }
    } // switch

    // start sending?
    if ((in_ready | init[0,1]) & accept_in) {
      four     = (init == 2b11 ? 4b0010 : 4b0)
               | (init == 2b01 ? 4b1000 : 4b0)
               | (init == 2b00 ? 4b0100 : 4b0);
      sendvec  = (init == 2b11 ? 32b01000100010001010000000000000000 : 32h0)
               //                ^^^^^^^^^^ produces ABh in normal SPI (wake up)
               | (init == 2b01 ? 32b01000101010001010000000000000000 : 32h0)
               //                ^^^^^^^^^^ produces BBh in normal SPI
               //        as we request continuous read, we remain in double mode
               | (init == 2b00 ? {addr,8h00} : 32h0) //_ after init
               ;
      spiflash.send_else_read = 1; // sending
  $$if SIMULATION then
      //__display("[%d](%d) spiflash [1] START @%x init:%b",cycle,cycle>>1,addr,init);
  $$if VERILATOR then
      vdta.addr = addr;
      //__display("[%d] spiflash, read @%h (%b) init:%b",cycle,addr,rdata_done,init);
  $$end
  $$end
      busy     = 1; // now busy
      stage    = 2;
      continue = 1; // reset continue
    }

$$if SIMULATION then
    cycle = cycle + 1;
$$end
  }
}

// -------------------------------------------------------------

// implements the old interface atop the new one, for backward compatibility
unit spiflash_rom(
  input   uint1  in_ready,
  input   uint24 addr,
  output  uint$nBytes*8$ rdata,
  output  uint1  busy(1),
  // QSPI flash
  output  uint1  sf_csn(1),
  output  uint1  sf_clk,
  inout   uint1  sf_io0,
  inout   uint1  sf_io1,
) {
  uint$nBytes$  keep_reading(0);
  uint1         core_busy(1);
  sameas(rdata) core_rdata(0);
  // instantiate spiflash_rom_core
  spiflash_rom_core core(
    in_ready <: keep_reading[0,1],
    busy     :> core_busy,
    rdata    :> core_rdata,
    <:auto:> );

  always {
$$if ICARUS then
    keep_reading = reset ? 0 : in_ready
$$else
    keep_reading = in_ready
$$end
                 ? {1b0,{$nBytes-1${1b1}}}
                 : ( core.rdata_available ? (keep_reading >> 1) : keep_reading );
    rdata        = core.rdata_available
                 ? {core_rdata, rdata[8,$(nBytes-1)*8$]}
                 : rdata;
    busy         = keep_reading[0,1] | core_busy;
  }
}


// -------------------------------------------------------------
