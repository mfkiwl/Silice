
$$N=16

algorithm main(output uint8 leds)
{

  // This array contains the values inserted as a stream in the sort pipeline
  uint8 in_values[$N$] = {
$$for i=0,N-1 do
     $math.random(254)$,
$$end  
  };

  // Here, we create for each pipeline stage:
  // - the value to be inserted at this stage (to_insert_n)
  // - the result value of the sort (sorted_n)
$$for n=0,N do
  uint8 sorted_$n$    = 255;
  uint8 to_insert_$n$ = 255;
$$end
  // NOTE: It would be more convenient for 'sorted' to be an array,
  //       however Silice will reject the pipeline as it will consider
  //       it is arbitrarily read/written at every stage.
  
  // insert values, one each clock cycle
  uint8 i = 0;
  while (i<$2*N$) { // As the pipeline has depth N, we have to iterate for 2.N 
                    // to ensure the sort is fully propagated

    // the streamed value to insert is placed at the top of the pipeline    
    to_insert_0 = i < $N$ ? in_values[i] : 255;
    
    // pipeline stages, generated by the pre-processor
    // the syntax is 
    // {
    //    stage 0
    // } -> {
    //    stage 1
    // } -> {
    //    ...
    // } -> {
    //    final stage
    // }    
$$for n=0,N-1 do
    {
      // at stage n we compare the value to insert to the current value
      if (to_insert_$n$ < sorted_$n$) {  // if the value to insert is smaller, we insert here
        to_insert_$n+1$ = sorted_$n$;    // the current value is evicted and becomes the next one to insert
        sorted_$n$      = to_insert_$n$;
      } else {
        to_insert_$n+1$ = to_insert_$n$; // otherwise, the value has to be inserted further
      }
    }
$$if n < N-1 then
    -> // pipe to next stage (if not last)
$$end    
$$end

    i = i + 1;
  } 
  
$$for n=0,N-1 do
   __display("[%d] = %d",$n$,sorted_$n$);
$$end   

}
